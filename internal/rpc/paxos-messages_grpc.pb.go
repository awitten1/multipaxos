// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaxosClient is the client API for Paxos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaxosClient interface {
	ClientCommand(ctx context.Context, in *CommandBody, opts ...grpc.CallOption) (*CommandResponse, error)
	Prepare(ctx context.Context, in *PrepareBody, opts ...grpc.CallOption) (*PromiseBody, error)
	Accept(ctx context.Context, in *AcceptBody, opts ...grpc.CallOption) (*AcceptedBody, error)
	Learn(ctx context.Context, in *LearnBody, opts ...grpc.CallOption) (*LearnAck, error)
	GetLog(ctx context.Context, in *GetLogBody, opts ...grpc.CallOption) (*Log, error)
}

type paxosClient struct {
	cc grpc.ClientConnInterface
}

func NewPaxosClient(cc grpc.ClientConnInterface) PaxosClient {
	return &paxosClient{cc}
}

func (c *paxosClient) ClientCommand(ctx context.Context, in *CommandBody, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/Paxos/ClientCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosClient) Prepare(ctx context.Context, in *PrepareBody, opts ...grpc.CallOption) (*PromiseBody, error) {
	out := new(PromiseBody)
	err := c.cc.Invoke(ctx, "/Paxos/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosClient) Accept(ctx context.Context, in *AcceptBody, opts ...grpc.CallOption) (*AcceptedBody, error) {
	out := new(AcceptedBody)
	err := c.cc.Invoke(ctx, "/Paxos/Accept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosClient) Learn(ctx context.Context, in *LearnBody, opts ...grpc.CallOption) (*LearnAck, error) {
	out := new(LearnAck)
	err := c.cc.Invoke(ctx, "/Paxos/Learn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosClient) GetLog(ctx context.Context, in *GetLogBody, opts ...grpc.CallOption) (*Log, error) {
	out := new(Log)
	err := c.cc.Invoke(ctx, "/Paxos/GetLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaxosServer is the server API for Paxos service.
// All implementations must embed UnimplementedPaxosServer
// for forward compatibility
type PaxosServer interface {
	ClientCommand(context.Context, *CommandBody) (*CommandResponse, error)
	Prepare(context.Context, *PrepareBody) (*PromiseBody, error)
	Accept(context.Context, *AcceptBody) (*AcceptedBody, error)
	Learn(context.Context, *LearnBody) (*LearnAck, error)
	GetLog(context.Context, *GetLogBody) (*Log, error)
	mustEmbedUnimplementedPaxosServer()
}

// UnimplementedPaxosServer must be embedded to have forward compatible implementations.
type UnimplementedPaxosServer struct {
}

func (UnimplementedPaxosServer) ClientCommand(context.Context, *CommandBody) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientCommand not implemented")
}
func (UnimplementedPaxosServer) Prepare(context.Context, *PrepareBody) (*PromiseBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedPaxosServer) Accept(context.Context, *AcceptBody) (*AcceptedBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedPaxosServer) Learn(context.Context, *LearnBody) (*LearnAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Learn not implemented")
}
func (UnimplementedPaxosServer) GetLog(context.Context, *GetLogBody) (*Log, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLog not implemented")
}
func (UnimplementedPaxosServer) mustEmbedUnimplementedPaxosServer() {}

// UnsafePaxosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaxosServer will
// result in compilation errors.
type UnsafePaxosServer interface {
	mustEmbedUnimplementedPaxosServer()
}

func RegisterPaxosServer(s grpc.ServiceRegistrar, srv PaxosServer) {
	s.RegisterService(&Paxos_ServiceDesc, srv)
}

func _Paxos_ClientCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServer).ClientCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Paxos/ClientCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServer).ClientCommand(ctx, req.(*CommandBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Paxos/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServer).Prepare(ctx, req.(*PrepareBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Paxos/Accept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServer).Accept(ctx, req.(*AcceptBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos_Learn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearnBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServer).Learn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Paxos/Learn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServer).Learn(ctx, req.(*LearnBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos_GetLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServer).GetLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Paxos/GetLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServer).GetLog(ctx, req.(*GetLogBody))
	}
	return interceptor(ctx, in, info, handler)
}

// Paxos_ServiceDesc is the grpc.ServiceDesc for Paxos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Paxos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Paxos",
	HandlerType: (*PaxosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientCommand",
			Handler:    _Paxos_ClientCommand_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _Paxos_Prepare_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _Paxos_Accept_Handler,
		},
		{
			MethodName: "Learn",
			Handler:    _Paxos_Learn_Handler,
		},
		{
			MethodName: "GetLog",
			Handler:    _Paxos_GetLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/paxos-messages.proto",
}
